ylab="New orders index", xlab="")
lines(fit$time.series[,2],col="red",ylab="Trend")
fit <- ses(oildata, alpha=0.2, initial="simple",h=3)
fit <- ses(oildata, alpha=0.6, initial="simple",h=3)
library('forecast')
library('forecast')
library('fpp')
fit1 <- ses(oildata, alpha=0.2, initial="simple",h=3)
fit2 <- ses(oildata, alpha=0.6, initial="simple",h=3)
fit3 <- ses(oildata,h=3)
fit1 <- ses(oil, alpha=0.2, initial="simple",h=3)
fit2 <- ses(oil, alpha=0.6, initial="simple",h=3)
fit3 <- ses(oil, h=3)
plot(fit1)
plot(fit2)
plot(fit3)
plot(fit1,plot.conf=FALSE,ylab="Oil (millions of tonnes)",
xlab="Year",main="",fcol="white",type="o")
lines(fitted(fit1),col="blue",type="o")
lines(fitted(fit2),col="red",type="o")
lines(fitted(fit3),col="green",type="o")
lines(fitted(fit1),col="blue",type="o")
lines(fitted(fit2),col="red",type="o")
lines(fitted(fit3),col="green",type="o")
lines(fitted(fit1),col="blue",type="o")
lines(fitted(fit2),col="red",type="o")
lines(fitted(fit3),col="green",type="o")
lines(fitted(fit1),col="blue",type="o")
lines(fitted(fit2),col="red",type="o")
lines(fitted(fit3),col="green",type="o")
lines(fitted(fit1),col="blue",type="o")
lines(fitted(fit2),col="red",type="o")
lines(fitted(fit3),col="green",type="o")
lines(fitted(fit1),col="blue",type="o")
lines(fitted(fit2),col="red",type="o")
lines(fitted(fit3),col="green",type="o")
lines(fitted(fit1),col="blue",type="o")
lines(fitted(fit2),col="red",type="o")
lines(fitted(fit3),col="green",type="o")
plot(fit1,plot.conf=FALSE,ylab="Oil (millions of tonnes)",
xlab="Year",main="",fcol="white",type="o")
lines(fitted(fit1),col="blue",type="o")
lines(fitted(fit2),col="red",type="o")
lines(fitted(fit3),col="green",type="o")
lines(fit1$mean,col="blue",type="o")
lines(fit2$mean,col="red",type="o")
lines(fit3$mean,col="green",type="o")
legend("topleft",lty=1,col=c(1,"blue","red","green"),
c("data",expression(alpha==0.2),expression(alpha==0.6),
expression(alpha==0.89)),pch=1)
fit3
?fit3
fot3
fit2
?ses
?HoltWinters
legend("topleft",lty=1,col=c(1,"blue","red","green"),
c("data",expression(alpha==0.2),expression(alpha==0.6),
expression(alpha==0.99)),pch=1)
plot(fit1,plot.conf=FALSE,ylab="Oil (millions of tonnes)",
xlab="Year",main="",fcol="white",type="o")
lines(fitted(fit1),col="blue",type="o")
lines(fitted(fit2),col="red",type="o")
lines(fitted(fit3),col="green",type="o")
lines(fit1$mean,col="blue",type="o")
lines(fit2$mean,col="red",type="o")
lines(fit3$mean,col="green",type="o")
legend("topleft",lty=1,col=c(1,"blue","red","green"),
c("data",expression(alpha==0.2),expression(alpha==0.6),
expression(alpha==0.99)),pch=1)
plot(aust)
aust <- window(austourists,start=2005)
plot(aust)
fit1 <- hw(aust,seasonal="additive")
fit2 <- hw(aust,seasonal="multiplicative")
plot(fit1)
plot(fit2)
plot(fit2,ylab="International visitor night in Australia (millions)",
plot.conf=FALSE,type="o",fcol="white",xlab="Year")
plot(fit2,ylab="International visitor night in Australia (millions)",
plot.conf=FALSE,type="o",fcol="white",xlab="Year")
lines(fitted(fit1),col="red",lty=2)
lines(fitted(fit2),col="green",lty=2)
lines(fit1$mean,type="o",col="red")
lines(fit2$mean,type="o",col="green")
legend("topleft",lty=1,pch=1,col=1:3
c("data","Holt Winters' Additive","Holt Winters' Multiplicative"))
legend("topleft",lty=1,pch=1,col=1:3,
c("data","Holt Winters' Additive","Holt Winters' Multiplicative"))
plot.waterfall(indata)
library(ggplot2)
library(scales)
indata = data.frame(value=c(0.010845625,-0.001292489,-0.000351563,0.000795193,0.000200421,0.010197186),
desc=c("Initial","Closed", "Defaults", "Migration", "News","Final"))
percent0 <- function(x, digits = 3, format = "f", ...) {
return(paste0(formatC(100 * x, format = format, digits = digits, ...), "%"))
}
plot.waterfall <- function(indata, szgeom=4)
{
balance <- indata
balance$desc <- factor(balance$desc, levels = balance$desc)
balance$id <- seq_along(balance$value)
balance$type <- ifelse(balance$value > 0, "in","out")
balance$type[c(1,length(balance$type))]='net'
balance$end <- cumsum(balance$value)
balance$end <- c(head(balance$end, -1), 0)
balance$start <- c(0, head(balance$end, -1))
balance$type <- factor(balance$type, levels = c("out","in", "net"))
ftype=rep(0,6)
p1 <- ggplot(balance, aes(fill = type)) + geom_rect(aes(x = desc,xmin = id - 0.45, xmax = id + 0.45, ymin = end,
ymax = start)) + scale_y_continuous("PD", labels = percent)+theme(axis.title.x = element_blank())
p2 <- p1 + geom_text(size=szgeom,data=balance[balance$type == "in",], aes(id, end, label = percent0(value)), vjust = 1) +
geom_text(size=szgeom,data=balance[balance$type == "out",], aes(id,end, label = percent0(value)), vjust = -0.3) +
geom_text(size=1.2*szgeom,data=balance[balance$desc == "Initial",],
aes(id, end, colour = ftype, label = percent0(end), vjust = ifelse(end <start, 1, -0.3))) +
geom_text(size=1.2*szgeom, data=balance[balance$desc == "Final",], aes(id, start,colour = ftype, label = percent0(start),
vjust = ifelse(end < start, -0.3, 1)), size = 3.5) + theme(legend.position="none")+
theme(axis.text=element_text(size=rel(1.1)))
return(p2)
}
plot.waterfall(indata)
6*7
#install.packages('fpp')
#install.packages('forecast')
library('forecast')
library('fpp')
# Time series Components
fit <- stl(elecequip,s.window=5)
plot(fit)
plot(elecequip,col="green",
main="Electrical equipment manufacturing",
ylab="New orders index", xlab="")
lines(fit$time.series[,2],col="red",ylab="Trend")
# Exponential Smoothing Model
fit1 <- ses(oil, alpha=0.2, initial="simple",h=3)
fit2 <- ses(oil, alpha=0.6, initial="simple",h=3)
fit3 <- ses(oil, h=3)
plot(fit1,plot.conf=FALSE,ylab="Oil (millions of tonnes)",
xlab="Year",main="",fcol="white",type="o")
lines(fitted(fit1),col="blue",type="o")
lines(fitted(fit2),col="red",type="o")
lines(fitted(fit3),col="green",type="o")
lines(fit1$mean,col="blue",type="o")
lines(fit2$mean,col="red",type="o")
lines(fit3$mean,col="green",type="o")
legend("topleft",lty=1,col=c(1,"blue","red","green"),
c("data",expression(alpha==0.2),expression(alpha==0.6),
expression(alpha==0.99)),pch=1)
# Holt Winters
aust <- window(austourists,start=2005)
fit1 <- hw(aust,seasonal="additive")
fit2 <- hw(aust,seasonal="multiplicative")
plot(fit2,ylab="International visitor night in Australia (millions)",
plot.conf=FALSE,type="o",fcol="white",xlab="Year")
lines(fitted(fit1),col="red",lty=2)
lines(fitted(fit2),col="green",lty=2)
lines(fit1$mean,type="o",col="red")
lines(fit2$mean,type="o",col="green")
legend("topleft",lty=1,pch=1,col=1:3,
c("data","Holt Winters' Additive","Holt Winters' Multiplicative"))
#ARIMA Model
tsdisplay(diff(eeadj),main="")
fit <- Arima(eeadj,order=c(3,1,1))
##### Fodmaps data wrangling
# Wrangling and exploratory data analysis
### Libraries
library(dplyr)
### Load data
setwd("/Users/LouisTsang/documents/GA - Data Science 2016 - TA/student qs/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
# # Datetime
# dfFoods$Datetime <- strptime(dfFoods$Datetime,"%d/%m/%Y %H:%M:%S", tz="GMT")
# dfSymptoms$Datetime <- strptime(dfSymptoms$Datetime,"%d/%m/%Y %H:%M:%S", tz="GMT")
# dfSleepyPills$Datetime <- strptime(dfSleepyPills$Datetime,"%d/%m/%Y %H:%M:%S", tz="GMT")
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
## Boolean
dfFoods$Fibre[which(dfFoods$Fibre == "true")] <- TRUE
dfFoods$Fibre[which(dfFoods$Fibre == "false")] <- FALSE
dfFoods$Enzymes[which(dfFoods$Enzymes == "true")] <- TRUE
dfFoods$Enzymes[which(dfFoods$Enzymes == "false")] <- FALSE
dfFoods$Fibre <- as.logical(dfFoods$Fibre)
dfFoods$Enzymes <- as.logical(dfFoods$Enzymes)
## Flag outcome
dfSymptoms$Symptoms <- 1
### Select and rename columns by Date
dfF.date <- dfFoods %>%
select(Date,
Food = Food.Ingredient)
dfF.date <- unique(dfF.date)
dfS.date <- dfSymptoms %>%
select(Date,
Symptoms)
dfS.date <- unique(dfS.date)
### Merge by Date
df.date <- left_join(dfF.date, dfS.date, by = "Date")
df.date$Symptoms[is.na(df.date$Symptoms)] <- 0 # Impute 0
df.date <- df.date[order(df.date$Date), ]
### Set days to count back
daysBack <- 1
### Get good foods
## Get dates when there were no symptoms
datesGood <- unique(df.date$Date[which(df.date$Symptoms == 0)])
## Get previous dates within a range
datesPrevious <- datesGood - daysBack
## Get all foods the previous day
goodFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesGood[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesGood[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
goodFoods <- c(goodFoods, addFoods)
}
goodFoods <- unique(goodFoods)
goodFoods <- goodFoods[-1]
### Get bad foods
## Get dates when there were symptoms
datesBad <- unique(df.date$Date[which(df.date$Symptoms == 1)])
## Get previous dates within a range
datesPrevious <- datesBad - daysBack
## Get all foods the previous day
badFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesBad[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesBad[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
badFoods <- c(badFoods, addFoods)
}
badFoods <- unique(badFoods)
badFoods <- badFoods[-1]
### Identify really bad foods
## Examine badFoods with any goodFoods removed
reallyBadFoods <- sort(setdiff(badFoods, goodFoods))
reallyBadFoods
### Get dates when you consumed the really bad foods
min(df.date$Date); max(df.date$Date)
sort(unique(df.date$Date[which(df.date$Food %in% reallyBadFoods)]))
sort(table(weekdays(sort(unique(df.date$Date[which(df.date$Food %in% reallyBadFoods)])))), decreasing = T)
### Calendar plots example
# https://www.r-bloggers.com/calendar-charts-with-googlevis/
stock <- "MSFT"
start.date <- "2012-01-01"
end.date <- Sys.Date()
quote <- paste("http://ichart.finance.yahoo.com/table.csv?s=",
stock,
"&a=", substr(start.date,6,7),
"&b=", substr(start.date, 9, 10),
"&c=", substr(start.date, 1,4),
"&d=", substr(end.date,6,7),
"&e=", substr(end.date, 9, 10),
"&f=", substr(end.date, 1,4),
"&g=d&ignore=.csv", sep="")
stock.data <- read.csv(quote, as.is=TRUE)
stock.data$Date <- as.Date(stock.data$Date)
## Uncomment the next 3 lines to install the developer version of googleVis
# install.packages(c("devtools","RJSONIO", "knitr", "shiny", "httpuv"))
# library(devtools)
# install_github("mages/googleVis")
library(googleVis)
plot(
gvisCalendar(data=stock.data, datevar="Date", numvar="Adj.Close",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
install.packages('dplyr')
##### Fodmaps data wrangling
# Wrangling and exploratory data analysis
#install.packages('dplyr')
### Libraries
library(dplyr)
### Load data
setwd("/Users/LouisTsang/documents/GA - Data Science 2016 - TA/student qs/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
# # Datetime
# dfFoods$Datetime <- strptime(dfFoods$Datetime,"%d/%m/%Y %H:%M:%S", tz="GMT")
# dfSymptoms$Datetime <- strptime(dfSymptoms$Datetime,"%d/%m/%Y %H:%M:%S", tz="GMT")
# dfSleepyPills$Datetime <- strptime(dfSleepyPills$Datetime,"%d/%m/%Y %H:%M:%S", tz="GMT")
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
## Boolean
dfFoods$Fibre[which(dfFoods$Fibre == "true")] <- TRUE
dfFoods$Fibre[which(dfFoods$Fibre == "false")] <- FALSE
dfFoods$Enzymes[which(dfFoods$Enzymes == "true")] <- TRUE
dfFoods$Enzymes[which(dfFoods$Enzymes == "false")] <- FALSE
dfFoods$Fibre <- as.logical(dfFoods$Fibre)
dfFoods$Enzymes <- as.logical(dfFoods$Enzymes)
## Flag outcome
dfSymptoms$Symptoms <- 1
### Select and rename columns by Date
dfF.date <- dfFoods %>%
select(Date,
Food = Food.Ingredient)
dfF.date <- unique(dfF.date)
dfS.date <- dfSymptoms %>%
select(Date,
Symptoms)
dfS.date <- unique(dfS.date)
### Merge by Date
df.date <- left_join(dfF.date, dfS.date, by = "Date")
df.date$Symptoms[is.na(df.date$Symptoms)] <- 0 # Impute 0
df.date <- df.date[order(df.date$Date), ]
### Set days to count back
daysBack <- 1
### Get good foods
## Get dates when there were no symptoms
datesGood <- unique(df.date$Date[which(df.date$Symptoms == 0)])
## Get previous dates within a range
datesPrevious <- datesGood - daysBack
## Get all foods the previous day
goodFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesGood[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesGood[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
goodFoods <- c(goodFoods, addFoods)
}
goodFoods <- unique(goodFoods)
goodFoods <- goodFoods[-1]
### Get bad foods
## Get dates when there were symptoms
datesBad <- unique(df.date$Date[which(df.date$Symptoms == 1)])
## Get previous dates within a range
datesPrevious <- datesBad - daysBack
## Get all foods the previous day
badFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesBad[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesBad[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
badFoods <- c(badFoods, addFoods)
}
badFoods <- unique(badFoods)
badFoods <- badFoods[-1]
### Identify really bad foods
## Examine badFoods with any goodFoods removed
reallyBadFoods <- sort(setdiff(badFoods, goodFoods))
reallyBadFoods
### Get dates when you consumed the really bad foods
min(df.date$Date); max(df.date$Date)
sort(unique(df.date$Date[which(df.date$Food %in% reallyBadFoods)]))
sort(table(weekdays(sort(unique(df.date$Date[which(df.date$Food %in% reallyBadFoods)])))), decreasing = T)
### Calendar plots example
# https://www.r-bloggers.com/calendar-charts-with-googlevis/
stock <- "MSFT"
start.date <- "2012-01-01"
end.date <- Sys.Date()
quote <- paste("http://ichart.finance.yahoo.com/table.csv?s=",
stock,
"&a=", substr(start.date,6,7),
"&b=", substr(start.date, 9, 10),
"&c=", substr(start.date, 1,4),
"&d=", substr(end.date,6,7),
"&e=", substr(end.date, 9, 10),
"&f=", substr(end.date, 1,4),
"&g=d&ignore=.csv", sep="")
stock.data <- read.csv(quote, as.is=TRUE)
stock.data$Date <- as.Date(stock.data$Date)
## Uncomment the next 3 lines to install the developer version of googleVis
# install.packages(c("devtools","RJSONIO", "knitr", "shiny", "httpuv"))
# library(devtools)
# install_github("mages/googleVis")
library(googleVis)
plot(
gvisCalendar(data=stock.data, datevar="Date", numvar="Adj.Close",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
install.packages('googleVis')
##### Fodmaps data wrangling
# Wrangling and exploratory data analysis
#install.packages('dplyr')
### Libraries
library(dplyr)
### Load data
setwd("/Users/LouisTsang/documents/GA - Data Science 2016 - TA/student qs/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
# # Datetime
# dfFoods$Datetime <- strptime(dfFoods$Datetime,"%d/%m/%Y %H:%M:%S", tz="GMT")
# dfSymptoms$Datetime <- strptime(dfSymptoms$Datetime,"%d/%m/%Y %H:%M:%S", tz="GMT")
# dfSleepyPills$Datetime <- strptime(dfSleepyPills$Datetime,"%d/%m/%Y %H:%M:%S", tz="GMT")
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
## Boolean
dfFoods$Fibre[which(dfFoods$Fibre == "true")] <- TRUE
dfFoods$Fibre[which(dfFoods$Fibre == "false")] <- FALSE
dfFoods$Enzymes[which(dfFoods$Enzymes == "true")] <- TRUE
dfFoods$Enzymes[which(dfFoods$Enzymes == "false")] <- FALSE
dfFoods$Fibre <- as.logical(dfFoods$Fibre)
dfFoods$Enzymes <- as.logical(dfFoods$Enzymes)
## Flag outcome
dfSymptoms$Symptoms <- 1
### Select and rename columns by Date
dfF.date <- dfFoods %>%
select(Date,
Food = Food.Ingredient)
dfF.date <- unique(dfF.date)
dfS.date <- dfSymptoms %>%
select(Date,
Symptoms)
dfS.date <- unique(dfS.date)
### Merge by Date
df.date <- left_join(dfF.date, dfS.date, by = "Date")
df.date$Symptoms[is.na(df.date$Symptoms)] <- 0 # Impute 0
df.date <- df.date[order(df.date$Date), ]
### Set days to count back
daysBack <- 1
### Get good foods
## Get dates when there were no symptoms
datesGood <- unique(df.date$Date[which(df.date$Symptoms == 0)])
## Get previous dates within a range
datesPrevious <- datesGood - daysBack
## Get all foods the previous day
goodFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesGood[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesGood[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
goodFoods <- c(goodFoods, addFoods)
}
goodFoods <- unique(goodFoods)
goodFoods <- goodFoods[-1]
### Get bad foods
## Get dates when there were symptoms
datesBad <- unique(df.date$Date[which(df.date$Symptoms == 1)])
## Get previous dates within a range
datesPrevious <- datesBad - daysBack
## Get all foods the previous day
badFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesBad[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesBad[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
badFoods <- c(badFoods, addFoods)
}
badFoods <- unique(badFoods)
badFoods <- badFoods[-1]
### Identify really bad foods
## Examine badFoods with any goodFoods removed
reallyBadFoods <- sort(setdiff(badFoods, goodFoods))
reallyBadFoods
### Get dates when you consumed the really bad foods
min(df.date$Date); max(df.date$Date)
sort(unique(df.date$Date[which(df.date$Food %in% reallyBadFoods)]))
sort(table(weekdays(sort(unique(df.date$Date[which(df.date$Food %in% reallyBadFoods)])))), decreasing = T)
### Calendar plots example
# https://www.r-bloggers.com/calendar-charts-with-googlevis/
stock <- "MSFT"
start.date <- "2012-01-01"
end.date <- Sys.Date()
quote <- paste("http://ichart.finance.yahoo.com/table.csv?s=",
stock,
"&a=", substr(start.date,6,7),
"&b=", substr(start.date, 9, 10),
"&c=", substr(start.date, 1,4),
"&d=", substr(end.date,6,7),
"&e=", substr(end.date, 9, 10),
"&f=", substr(end.date, 1,4),
"&g=d&ignore=.csv", sep="")
stock.data <- read.csv(quote, as.is=TRUE)
stock.data$Date <- as.Date(stock.data$Date)
## Uncomment the next 3 lines to install the developer version of googleVis
# install.packages(c("devtools","RJSONIO", "knitr", "shiny", "httpuv"))
# library(devtools)
# install_github("mages/googleVis")
library(googleVis)
plot(
gvisCalendar(data=stock.data, datevar="Date", numvar="Adj.Close",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
