datesGood <- unique(df.date$Date[which(df.date$Symptoms == 0)])
## Get dates from three days ago exclusive
datesPrevious <- datesGood - 1
## Get all foods the previous day
goodFoods <- ""
for (i in datesPrevious) {
# ## Get dates in between
# datesBetween <- seq(datesFrom[i], datesTo[i], "days")
## Subset data frame based on date range
#addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
addFoods <- unique(df.date$Food[df.date$Date == i])
goodFoods <- c(goodFoods, addFoods)
}
goodFoods <- unique(goodFoods)
goodFoods <- goodFoods[-1]
datesBad <- unique(df.date$Date[which(df.date$Symptoms == 0)])
datesBad
datesBad <- unique(df.date$Date[which(df.date$Symptoms == 1)])
datesBad
datesPrevious <- datesGood - 1
datesBad
datesPrevious
## Get dates when there were symptoms
datesBad <- unique(df.date$Date[which(df.date$Symptoms == 1)])
## Get previous dates
datesPrevious <- datesGood - 1
## Get all foods the previous day
badFoods <- ""
for (i in datesPrevious) {
# ## Get dates in between
# datesBetween <- seq(datesFrom[i], datesTo[i], "days")
## Subset data frame based on date range
#addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
addFoods <- unique(df.date$Food[df.date$Date == i])
badFoods <- c(badFoods, addFoods)
}
badFoods <- unique(badFoods)
badFoods <- badFoods[-1]
badFoods
goodFoods
badFoods
setdiff(badFoods, goodFoods)
### Get bad foods
## Get dates when there were symptoms
datesBad <- unique(df.date$Date[which(df.date$Symptoms == 1)])
## Get previous dates
datesPrevious <- datesBad - 1
## Get all foods the previous day
badFoods <- ""
for (i in datesPrevious) {
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date == i])
badFoods <- c(badFoods, addFoods)
}
badFoods <- unique(badFoods)
badFoods <- badFoods[-1]
setdiff(badFoods, goodFoods)
goodFoods
reallyBadFoods <- setdiff(badFoods, goodFoods)
reallyBadFoods
datesGood <- unique(df.date$Date[which(df.date$Symptoms == 0)])
datesPrevious <- datesGood - 2 # Change here!
datesGood
datesPrevious
i=1
datesBetween <- seq(datesFrom[i], datesTo[i], "days")
datesBetween <- seq(datesPrevious[i], datesGood[i], "days")
datesBetween
datesBetween
datesGood[i]
datesBetween[!datesBetween %in% datesGood[i]]
datesBetween <- seq(datesPrevious[i], datesGood[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesGood[i]]
datesBetween
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
addFoods
### Get bad foods
## Get dates when there were symptoms
datesBad <- unique(df.date$Date[which(df.date$Symptoms == 1)])
## Get previous dates within a range
datesPrevious <- datesBad - 2 # Change here!
## Get all foods the previous day
goodFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesGood[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesGood[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
badFoods <- c(badFoods, addFoods)
}
badFoods <- unique(badFoods)
badFoods <- badFoods[-1]
## Get dates when there were no symptoms
datesGood <- unique(df.date$Date[which(df.date$Symptoms == 0)])
## Get previous dates within a range
datesPrevious <- datesGood - 2 # Change here!
## Get all foods the previous day
goodFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesGood[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesGood[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
goodFoods <- c(goodFoods, addFoods)
}
goodFoods <- unique(goodFoods)
goodFoods <- goodFoods[-1]
datesBad <- unique(df.date$Date[which(df.date$Symptoms == 1)])
datesPrevious <- datesBad - 2 # Change here!
badFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesGood[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesGood[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
badFoods <- c(badFoods, addFoods)
}
## Get all foods the previous day
badFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesBad[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesBad[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
badFoods <- c(badFoods, addFoods)
}
badFoods <- unique(badFoods)
badFoods <- badFoods[-1]
goodFoods
badFoods
reallyBadFoods <- setdiff(badFoods, goodFoods)
reallyBadFoods
daysBack <- 1
### Get good foods
## Get dates when there were no symptoms
datesGood <- unique(df.date$Date[which(df.date$Symptoms == 0)])
## Get previous dates within a range
datesPrevious <- datesGood - daysBack
## Get all foods the previous day
goodFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesGood[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesGood[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
goodFoods <- c(goodFoods, addFoods)
}
goodFoods <- unique(goodFoods)
goodFoods <- goodFoods[-1]
### Get bad foods
## Get dates when there were symptoms
datesBad <- unique(df.date$Date[which(df.date$Symptoms == 1)])
## Get previous dates within a range
datesPrevious <- datesBad - daysBack
## Get all foods the previous day
badFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesBad[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesBad[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
badFoods <- c(badFoods, addFoods)
}
badFoods <- unique(badFoods)
badFoods <- badFoods[-1]
### Identify really bad foods
## Examine badFoods with any goodFoods removed
reallyBadFoods <- setdiff(badFoods, goodFoods)
reallyBadFoods
daysBack <- 3
### Get good foods
## Get dates when there were no symptoms
datesGood <- unique(df.date$Date[which(df.date$Symptoms == 0)])
## Get previous dates within a range
datesPrevious <- datesGood - daysBack
## Get all foods the previous day
goodFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesGood[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesGood[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
goodFoods <- c(goodFoods, addFoods)
}
goodFoods <- unique(goodFoods)
goodFoods <- goodFoods[-1]
### Get bad foods
## Get dates when there were symptoms
datesBad <- unique(df.date$Date[which(df.date$Symptoms == 1)])
## Get previous dates within a range
datesPrevious <- datesBad - daysBack
## Get all foods the previous day
badFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesBad[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesBad[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
badFoods <- c(badFoods, addFoods)
}
badFoods <- unique(badFoods)
badFoods <- badFoods[-1]
### Identify really bad foods
## Examine badFoods with any goodFoods removed
reallyBadFoods <- setdiff(badFoods, goodFoods)
reallyBadFoods
daysBack <- 4
### Get good foods
## Get dates when there were no symptoms
datesGood <- unique(df.date$Date[which(df.date$Symptoms == 0)])
## Get previous dates within a range
datesPrevious <- datesGood - daysBack
## Get all foods the previous day
goodFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesGood[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesGood[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
goodFoods <- c(goodFoods, addFoods)
}
goodFoods <- unique(goodFoods)
goodFoods <- goodFoods[-1]
### Get bad foods
## Get dates when there were symptoms
datesBad <- unique(df.date$Date[which(df.date$Symptoms == 1)])
## Get previous dates within a range
datesPrevious <- datesBad - daysBack
## Get all foods the previous day
badFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesBad[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesBad[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
badFoods <- c(badFoods, addFoods)
}
badFoods <- unique(badFoods)
badFoods <- badFoods[-1]
### Identify really bad foods
## Examine badFoods with any goodFoods removed
reallyBadFoods <- setdiff(badFoods, goodFoods)
reallyBadFoods
##### Fodmaps data wrangling
### Libraries
library(dplyr)
### Load data
setwd("C:/Users/Muhsin Karim/Documents/GitHub/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
# # Datetime
# dfFoods$Datetime <- strptime(dfFoods$Datetime,"%d/%m/%Y %H:%M:%S", tz="GMT")
# dfSymptoms$Datetime <- strptime(dfSymptoms$Datetime,"%d/%m/%Y %H:%M:%S", tz="GMT")
# dfSleepyPills$Datetime <- strptime(dfSleepyPills$Datetime,"%d/%m/%Y %H:%M:%S", tz="GMT")
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
## Boolean
dfFoods$Fibre[which(dfFoods$Fibre == "true")] <- TRUE
dfFoods$Fibre[which(dfFoods$Fibre == "false")] <- FALSE
dfFoods$Enzymes[which(dfFoods$Enzymes == "true")] <- TRUE
dfFoods$Enzymes[which(dfFoods$Enzymes == "false")] <- FALSE
dfFoods$Fibre <- as.logical(dfFoods$Fibre)
dfFoods$Enzymes <- as.logical(dfFoods$Enzymes)
## Flag outcome
dfSymptoms$Symptoms <- 1
### Select and rename columns by Date
dfF.date <- dfFoods %>%
select(Date,
Food = Food.Ingredient,
Fibre)
dfF.date <- unique(dfF.date)
dfS.date <- dfSymptoms %>%
select(Date,
Symptoms)
dfS.date <- unique(dfS.date)
### Merge by Date
df.date <- left_join(dfF.date, dfS.date, by = "Date")
df.date$Symptoms[is.na(df.date$Symptoms)] <- 0 # Impute 0
df.date <- df.date[order(df.date$Date), ]
# ### Set window of previous day to exmaine foods, not include current day
#
# ## Get previous day
# df.date$PreviousDay <- df.date$Date - 1
#
# ## Remove rows where window does not exist
# minDate <- min(df.date$Date)
# df.date <- df.date[which(df.date$PreviousDay >= minDate), ]
### Set days to count back
daysBack <- 4
### Get good foods
## Get dates when there were no symptoms
datesGood <- unique(df.date$Date[which(df.date$Symptoms == 0)])
## Get previous dates within a range
datesPrevious <- datesGood - daysBack
## Get all foods the previous day
goodFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesGood[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesGood[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
goodFoods <- c(goodFoods, addFoods)
}
goodFoods <- unique(goodFoods)
goodFoods <- goodFoods[-1]
### Get bad foods
## Get dates when there were symptoms
datesBad <- unique(df.date$Date[which(df.date$Symptoms == 1)])
## Get previous dates within a range
datesPrevious <- datesBad - daysBack
## Get all foods the previous day
badFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesBad[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesBad[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
badFoods <- c(badFoods, addFoods)
}
badFoods <- unique(badFoods)
badFoods <- badFoods[-1]
### Identify really bad foods
## Examine badFoods with any goodFoods removed
reallyBadFoods <- setdiff(badFoods, goodFoods)
reallyBadFoods
##### Fodmaps data wrangling
### Libraries
library(dplyr)
### Load data
setwd("C:/Users/Muhsin Karim/Documents/GitHub/fodmaps")
dfFoods <- read.csv(file = "Foods.csv", header = T, stringsAsFactors = F)
dfSymptoms <- read.csv(file = "Symptoms.csv", header = T, stringsAsFactors = F)
dfSleepyPills <- read.csv(file = "Sleepy pills.csv", header = T,  stringsAsFactors = F)
### Format
# # Datetime
# dfFoods$Datetime <- strptime(dfFoods$Datetime,"%d/%m/%Y %H:%M:%S", tz="GMT")
# dfSymptoms$Datetime <- strptime(dfSymptoms$Datetime,"%d/%m/%Y %H:%M:%S", tz="GMT")
# dfSleepyPills$Datetime <- strptime(dfSleepyPills$Datetime,"%d/%m/%Y %H:%M:%S", tz="GMT")
## Date
dfFoods$Date <- as.Date(dfFoods$Datetime, format = "%d/%m/%Y")
dfSymptoms$Date <- as.Date(dfSymptoms$Datetime, format = "%d/%m/%Y")
dfSleepyPills$Date <- as.Date(dfSleepyPills$Datetime, format = "%d/%m/%Y")
## Boolean
dfFoods$Fibre[which(dfFoods$Fibre == "true")] <- TRUE
dfFoods$Fibre[which(dfFoods$Fibre == "false")] <- FALSE
dfFoods$Enzymes[which(dfFoods$Enzymes == "true")] <- TRUE
dfFoods$Enzymes[which(dfFoods$Enzymes == "false")] <- FALSE
dfFoods$Fibre <- as.logical(dfFoods$Fibre)
dfFoods$Enzymes <- as.logical(dfFoods$Enzymes)
## Flag outcome
dfSymptoms$Symptoms <- 1
### Select and rename columns by Date
dfF.date <- dfFoods %>%
select(Date,
Food = Food.Ingredient,
Fibre)
dfF.date <- unique(dfF.date)
dfS.date <- dfSymptoms %>%
select(Date,
Symptoms)
dfS.date <- unique(dfS.date)
### Merge by Date
df.date <- left_join(dfF.date, dfS.date, by = "Date")
df.date$Symptoms[is.na(df.date$Symptoms)] <- 0 # Impute 0
df.date <- df.date[order(df.date$Date), ]
# ### Set window of previous day to exmaine foods, not include current day
#
# ## Get previous day
# df.date$PreviousDay <- df.date$Date - 1
#
# ## Remove rows where window does not exist
# minDate <- min(df.date$Date)
# df.date <- df.date[which(df.date$PreviousDay >= minDate), ]
### Set days to count back
daysBack <- 1
### Get good foods
## Get dates when there were no symptoms
datesGood <- unique(df.date$Date[which(df.date$Symptoms == 0)])
## Get previous dates within a range
datesPrevious <- datesGood - daysBack
## Get all foods the previous day
goodFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesGood[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesGood[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
goodFoods <- c(goodFoods, addFoods)
}
goodFoods <- unique(goodFoods)
goodFoods <- goodFoods[-1]
### Get bad foods
## Get dates when there were symptoms
datesBad <- unique(df.date$Date[which(df.date$Symptoms == 1)])
## Get previous dates within a range
datesPrevious <- datesBad - daysBack
## Get all foods the previous day
badFoods <- ""
for (i in 1:length(datesPrevious)) {
## Get dates in between excluding day of symptom watch
datesBetween <- seq(datesPrevious[i], datesBad[i], "days")
datesBetween <- datesBetween[!datesBetween %in% datesBad[i]]
## Subset data frame based on date range
addFoods <- unique(df.date$Food[df.date$Date %in% datesBetween])
badFoods <- c(badFoods, addFoods)
}
badFoods <- unique(badFoods)
badFoods <- badFoods[-1]
### Identify really bad foods
## Examine badFoods with any goodFoods removed
reallyBadFoods <- setdiff(badFoods, goodFoods)
reallyBadFoods
reallyBadFoods <- sort(setdiff(badFoods, goodFoods))
reallyBadFoods
which(df.date$Food %in% reallyBadFoods)
df.date$Date[which(df.date$Food %in% reallyBadFoods)]
unique(df.date$Date[which(df.date$Food %in% reallyBadFoods)])
sort(unique(df.date$Date[which(df.date$Food %in% reallyBadFoods)]))
sort(unique(df.date$Date[which(df.date$Food %in% reallyBadFoods)]))
min(df.date$Date); max(df.date$Date)
weekdays(sort(unique(df.date$Date[which(df.date$Food %in% reallyBadFoods)])))
table(weekdays(sort(unique(df.date$Date[which(df.date$Food %in% reallyBadFoods)]))))
sort(table(weekdays(sort(unique(df.date$Date[which(df.date$Food %in% reallyBadFoods)])))))
sort(table(weekdays(sort(unique(df.date$Date[which(df.date$Food %in% reallyBadFoods)])))), decreasing = T)
reallyBadFoods
# data
st <- as.Date("2010-2-17")
en <- as.Date("2013-4-7")
datell <- seq(st, en, "1 day")
myd <- data.frame (date1 = datell, heatvar = rnorm (length (datell), 50, 20))
# plot
# using function written by Paul Bleicher
# requires lattice, chron, grid packages
require(lattice)
require(chron)
require(grid)
source ("http://blog.revolution-computing.com/downloads/calendarHeat.R")
calendarHeat(myd$date1, myd$heatvar, varname="VAR name")
st <- as.Date("2010-2-17")
en <- as.Date("2013-4-7")
datell <- seq(st, en, "1 day")
myd <- data.frame (date1 = datell, heatvar = rnorm (length (datell), 50, 20))
require(lattice)
require(chron)
install.packages("chron")
require(chron)
require(grid)
source ("http://blog.revolution-computing.com/downloads/calendarHeat.R")
calendarHeat(myd$date1, myd$heatvar, varname="VAR name")
source("http://blog.revolution-computing.com/downloads/calendarHeat.R")
calendarHeat(myd$date1, myd$heatvar, varname="VAR name")
install.packages("makeR")
library(makeR)
source("http://blog.revolution-computing.com/downloads/calendarHeat.R")
calendarHeat(myd$date1, myd$heatvar, varname="VAR name")
library(makeR)
install.packages("makeR")
version
require(quantmod)
install.packages(quantmod)
install.packages('quantmod')
require(ggplot2)
require(reshape2)
require(plyr)
require(scales)
getSymbols("^VIX",src="yahoo")
dat<-data.frame(date=index(VIX),VIX)
stock <- "MSFT"
start.date <- "2012-01-01"
end.date <- Sys.Date()
quote <- paste("http://ichart.finance.yahoo.com/table.csv?s=",
stock,
"&a=", substr(start.date,6,7),
"&b=", substr(start.date, 9, 10),
"&c=", substr(start.date, 1,4),
"&d=", substr(end.date,6,7),
"&e=", substr(end.date, 9, 10),
"&f=", substr(end.date, 1,4),
"&g=d&ignore=.csv", sep="")
stock.data <- read.csv(quote, as.is=TRUE)
stock.data$Date <- as.Date(stock.data$Date)
library(googleVis)
install.packages('googleVis')
library(googleVis)
plot(
gvisCalendar(data=stock.data, datevar="Date", numvar="Adj.Close",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
View(stock.data)
